PORTED FUNCs LIST (198 of 205):

 Mat getVocabulary()
 int descriptorSize()
 int descriptorType()
 void compute2(Mat image, vector_KeyPoint keypoints, Mat& imgDescriptor)
 void setVocabulary(Mat vocabulary)
static Ptr_javaFeatureDetector create(int detectorType)
 bool empty()
 void detect(Mat image, vector_KeyPoint& keypoints, Mat mask = Mat())
 void detect(vector_Mat images, vector_vector_KeyPoint& keypoints, vector_Mat masks = std::vector<Mat>())
 void read(String fileName)
 void write(String fileName)
static Ptr_FastFeatureDetector create(int threshold = 10, bool nonmaxSuppression = true, int type = FastFeatureDetector::TYPE_9_16)
 String getDefaultName()
 bool getNonmaxSuppression()
 int getThreshold()
 int getType()
 void setNonmaxSuppression(bool f)
 void setThreshold(int threshold)
 void setType(int type)
 String getDefaultName()
 bool empty()
 int defaultNorm()
 int descriptorSize()
 int descriptorType()
 void compute(Mat image, vector_KeyPoint& keypoints, Mat& descriptors)
 void compute(vector_Mat images, vector_vector_KeyPoint& keypoints, vector_Mat& descriptors)
 void detect(Mat image, vector_KeyPoint& keypoints, Mat mask = Mat())
 void detect(vector_Mat images, vector_vector_KeyPoint& keypoints, vector_Mat masks = vector_Mat())
 void detectAndCompute(Mat image, Mat mask, vector_KeyPoint& keypoints, Mat& descriptors, bool useProvidedKeypoints = false)
 void read(String fileName)
 void write(String fileName)
static Ptr_BRISK create(int thresh, int octaves, vector_float radiusList, vector_int numberList, float dMax = 5.85f, float dMin = 8.2f, vector_int indexChange = std::vector<int>())
static Ptr_BRISK create(int thresh = 30, int octaves = 3, float patternScale = 1.0f)
static Ptr_BRISK create(vector_float radiusList, vector_int numberList, float dMax = 5.85f, float dMin = 8.2f, vector_int indexChange = std::vector<int>())
 String getDefaultName()
  BFMatcher(int normType = NORM_L2, bool crossCheck = false)
static Ptr_BFMatcher create(int normType = NORM_L2, bool crossCheck = false)
static Ptr_AgastFeatureDetector create(int threshold = 10, bool nonmaxSuppression = true, int type = AgastFeatureDetector::OAST_9_16)
 String getDefaultName()
 bool getNonmaxSuppression()
 int getThreshold()
 int getType()
 void setNonmaxSuppression(bool f)
 void setThreshold(int threshold)
 void setType(int type)
static Ptr_GFTTDetector create(int maxCorners, double qualityLevel, double minDistance, int blockSize, int gradiantSize, bool useHarrisDetector = false, double k = 0.04)
static Ptr_GFTTDetector create(int maxCorners = 1000, double qualityLevel = 0.01, double minDistance = 1, int blockSize = 3, bool useHarrisDetector = false, double k = 0.04)
 String getDefaultName()
 bool getHarrisDetector()
 double getK()
 double getMinDistance()
 double getQualityLevel()
 int getBlockSize()
 int getMaxFeatures()
 void setBlockSize(int blockSize)
 void setHarrisDetector(bool val)
 void setK(double k)
 void setMaxFeatures(int maxFeatures)
 void setMinDistance(double minDistance)
 void setQualityLevel(double qlevel)
 Ptr_DescriptorMatcher clone(bool emptyTrainData = false)
static Ptr_DescriptorMatcher create(String descriptorMatcherType)
static Ptr_DescriptorMatcher create(int matcherType)
 bool empty()
 bool isMaskSupported()
 vector_Mat getTrainDescriptors()
 void add(vector_Mat descriptors)
 void clear()
 void knnMatch(Mat queryDescriptors, Mat trainDescriptors, vector_vector_DMatch& matches, int k, Mat mask = Mat(), bool compactResult = false)
 void knnMatch(Mat queryDescriptors, vector_vector_DMatch& matches, int k, vector_Mat masks = vector_Mat(), bool compactResult = false)
 void match(Mat queryDescriptors, Mat trainDescriptors, vector_DMatch& matches, Mat mask = Mat())
 void match(Mat queryDescriptors, vector_DMatch& matches, vector_Mat masks = vector_Mat())
 void radiusMatch(Mat queryDescriptors, Mat trainDescriptors, vector_vector_DMatch& matches, float maxDistance, Mat mask = Mat(), bool compactResult = false)
 void radiusMatch(Mat queryDescriptors, vector_vector_DMatch& matches, float maxDistance, vector_Mat masks = vector_Mat(), bool compactResult = false)
 void read(String fileName)
 void train()
 void write(String fileName)
static Ptr_KAZE create(bool extended = false, bool upright = false, float threshold = 0.001f, int nOctaves = 4, int nOctaveLayers = 4, int diffusivity = KAZE::DIFF_PM_G2)
 String getDefaultName()
 bool getExtended()
 bool getUpright()
 double getThreshold()
 int getDiffusivity()
 int getNOctaveLayers()
 int getNOctaves()
 void setDiffusivity(int diff)
 void setExtended(bool extended)
 void setNOctaveLayers(int octaveLayers)
 void setNOctaves(int octaves)
 void setThreshold(double threshold)
 void setUpright(bool upright)
 void drawKeypoints(Mat image, vector_KeyPoint keypoints, Mat& outImage, Scalar color = Scalar::all(-1), int flags = DrawMatchesFlags::DEFAULT)
 void drawMatches(Mat img1, vector_KeyPoint keypoints1, Mat img2, vector_KeyPoint keypoints2, vector_DMatch matches1to2, Mat& outImg, Scalar matchColor = Scalar::all(-1), Scalar singlePointColor = Scalar::all(-1), vector_char matchesMask = std::vector<char>(), int flags = DrawMatchesFlags::DEFAULT)
 void drawMatches(Mat img1, vector_KeyPoint keypoints1, Mat img2, vector_KeyPoint keypoints2, vector_vector_DMatch matches1to2, Mat outImg, Scalar matchColor = Scalar::all(-1), Scalar singlePointColor = Scalar::all(-1), vector_vector_char matchesMask = std::vector<std::vector<char> >(), int flags = 0)
 void drawMatches(Mat img1, vector_KeyPoint keypoints1, Mat img2, vector_KeyPoint keypoints2, vector_vector_DMatch matches1to2, Mat& outImg, Scalar matchColor = Scalar::all(-1), Scalar singlePointColor = Scalar::all(-1), vector_vector_char matchesMask = std::vector<std::vector<char> >(), int flags = DrawMatchesFlags::DEFAULT)
static Ptr_AKAZE create(int descriptor_type = AKAZE::DESCRIPTOR_MLDB, int descriptor_size = 0, int descriptor_channels = 3, float threshold = 0.001f, int nOctaves = 4, int nOctaveLayers = 4, int diffusivity = KAZE::DIFF_PM_G2)
 String getDefaultName()
 double getThreshold()
 int getDescriptorChannels()
 int getDescriptorSize()
 int getDescriptorType()
 int getDiffusivity()
 int getNOctaveLayers()
 int getNOctaves()
 void setDescriptorChannels(int dch)
 void setDescriptorSize(int dsize)
 void setDescriptorType(int dtype)
 void setDiffusivity(int diff)
 void setNOctaveLayers(int octaveLayers)
 void setNOctaves(int octaves)
 void setThreshold(double threshold)
  Params()
float Params::thresholdStep
void Params::thresholdStep
float Params::minThreshold
void Params::minThreshold
float Params::maxThreshold
void Params::maxThreshold
size_t Params::minRepeatability
void Params::minRepeatability
float Params::minDistBetweenBlobs
void Params::minDistBetweenBlobs
bool Params::filterByColor
void Params::filterByColor
bool Params::filterByArea
void Params::filterByArea
float Params::minArea
void Params::minArea
float Params::maxArea
void Params::maxArea
bool Params::filterByCircularity
void Params::filterByCircularity
float Params::minCircularity
void Params::minCircularity
float Params::maxCircularity
void Params::maxCircularity
bool Params::filterByInertia
void Params::filterByInertia
float Params::minInertiaRatio
void Params::minInertiaRatio
float Params::maxInertiaRatio
void Params::maxInertiaRatio
bool Params::filterByConvexity
void Params::filterByConvexity
float Params::minConvexity
void Params::minConvexity
float Params::maxConvexity
void Params::maxConvexity
 Mat cluster(Mat descriptors)
 Mat cluster()
 int descriptorsCount()
 vector_Mat getDescriptors()
 void add(Mat descriptors)
 void clear()
static Ptr_javaDescriptorExtractor create(int extractorType)
 bool empty()
 int descriptorSize()
 int descriptorType()
 void compute(Mat image, vector_KeyPoint& keypoints, Mat descriptors)
 void compute(vector_Mat images, vector_vector_KeyPoint& keypoints, vector_Mat& descriptors)
 void read(String fileName)
 void write(String fileName)
static Ptr_ORB create(int nfeatures = 500, float scaleFactor = 1.2f, int nlevels = 8, int edgeThreshold = 31, int firstLevel = 0, int WTA_K = 2, int scoreType = ORB::HARRIS_SCORE, int patchSize = 31, int fastThreshold = 20)
 String getDefaultName()
 double getScaleFactor()
 int getEdgeThreshold()
 int getFastThreshold()
 int getFirstLevel()
 int getMaxFeatures()
 int getNLevels()
 int getPatchSize()
 int getScoreType()
 int getWTA_K()
 void setEdgeThreshold(int edgeThreshold)
 void setFastThreshold(int fastThreshold)
 void setFirstLevel(int firstLevel)
 void setMaxFeatures(int maxFeatures)
 void setNLevels(int nlevels)
 void setPatchSize(int patchSize)
 void setScaleFactor(double scaleFactor)
 void setScoreType(int scoreType)
 void setWTA_K(int wta_k)
static Ptr_MSER create(int _delta = 5, int _min_area = 60, int _max_area = 14400, double _max_variation = 0.25, double _min_diversity = .2, int _max_evolution = 200, double _area_threshold = 1.01, double _min_margin = 0.003, int _edge_blur_size = 5)
 String getDefaultName()
 bool getPass2Only()
 int getDelta()
 int getMaxArea()
 int getMinArea()
 void detectRegions(Mat image, vector_vector_Point& msers, vector_Rect& bboxes)
 void setDelta(int delta)
 void setMaxArea(int maxArea)
 void setMinArea(int minArea)
 void setPass2Only(bool f)
  BOWKMeansTrainer(int clusterCount, TermCriteria termcrit = TermCriteria(), int attempts = 3, int flags = KMEANS_PP_CENTERS)
 Mat cluster(Mat descriptors)
 Mat cluster()
  FlannBasedMatcher(Ptr_flann_IndexParams indexParams = makePtr<flann::KDTreeIndexParams>(), Ptr_flann_SearchParams searchParams = makePtr<flann::SearchParams>())
static Ptr_FlannBasedMatcher create()

SKIPPED FUNCs LIST (7 of 205):

  BOWImgDescriptorExtractor(Ptr_DescriptorExtractor dextractor, Ptr_DescriptorMatcher dmatcher)
// Unknown type 'Ptr_DescriptorExtractor' (I), skipping the function

 void read(FileNode arg1)
// Unknown type 'FileNode' (I), skipping the function

 void write(Ptr_FileStorage fs, String name = String())
// Unknown type 'Ptr_FileStorage' (I), skipping the function

 void read(FileNode arg1)
// Unknown type 'FileNode' (I), skipping the function

 void write(Ptr_FileStorage fs, String name = String())
// Unknown type 'Ptr_FileStorage' (I), skipping the function

uchar Params::blobColor
// Return type 'uchar' is not supported, skipping the function

void Params::blobColor
// Unknown type 'uchar' (I), skipping the function


0 def args - 134 funcs
1 def args - 10 funcs
2 def args - 9 funcs
3 def args - 6 funcs
4 def args - 3 funcs
6 def args - 2 funcs
7 def args - 1 funcs
9 def args - 2 funcs